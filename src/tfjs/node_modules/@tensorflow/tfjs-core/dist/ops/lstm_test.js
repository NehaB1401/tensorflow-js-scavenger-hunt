"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dl = require("../index");
var test_util_1 = require("../test_util");
test_util_1.describeWithFlags('lstm', test_util_1.ALL_ENVS, function () {
    it('MultiRNNCell with 2 BasicLSTMCells', function () {
        var lstmKernel1 = dl.tensor2d([
            0.26242125034332275, -0.8787832260131836, 0.781475305557251,
            1.337337851524353, 0.6180247068405151, -0.2760246992111206,
            -0.11299663782119751, -0.46332040429115295, -0.1765323281288147,
            0.6807947158813477, -0.8326982855796814, 0.6732975244522095
        ], [3, 4]);
        var lstmBias1 = dl.tensor1d([1.090713620185852, -0.8282332420349121, 0, 1.0889357328414917]);
        var lstmKernel2 = dl.tensor2d([
            -1.893059492111206, -1.0185645818710327, -0.6270437240600586,
            -2.1829540729522705, -0.4583775997161865, -0.5454602241516113,
            -0.3114445209503174, 0.8450229167938232
        ], [2, 4]);
        var lstmBias2 = dl.tensor1d([0.9906240105628967, 0.6248329877853394, 0, 1.0224634408950806]);
        var forgetBias = dl.scalar(1.0);
        var lstm1 = function (data, c, h) {
            return dl.basicLSTMCell(forgetBias, lstmKernel1, lstmBias1, data, c, h);
        };
        var lstm2 = function (data, c, h) {
            return dl.basicLSTMCell(forgetBias, lstmKernel2, lstmBias2, data, c, h);
        };
        var c = [
            dl.zeros([1, lstmBias1.shape[0] / 4]),
            dl.zeros([1, lstmBias2.shape[0] / 4])
        ];
        var h = [
            dl.zeros([1, lstmBias1.shape[0] / 4]),
            dl.zeros([1, lstmBias2.shape[0] / 4])
        ];
        var onehot = dl.buffer([1, 2], 'float32');
        onehot.set(1.0, 0, 0);
        var output = dl.multiRNNCell([lstm1, lstm2], onehot.toTensor(), c, h);
        test_util_1.expectArraysClose(output[0][0], [-0.7440074682235718]);
        test_util_1.expectArraysClose(output[0][1], [0.7460772395133972]);
        test_util_1.expectArraysClose(output[1][0], [-0.5802832245826721]);
        test_util_1.expectArraysClose(output[1][1], [0.5745711922645569]);
    });
    it('basicLSTMCell with batch=2', function () {
        var lstmKernel = dl.randomNormal([3, 4]);
        var lstmBias = dl.randomNormal([4]);
        var forgetBias = dl.scalar(1.0);
        var data = dl.randomNormal([1, 2]);
        var batchedData = dl.concat2d([data, data], 0);
        var c = dl.randomNormal([1, 1]);
        var batchedC = dl.concat2d([c, c], 0);
        var h = dl.randomNormal([1, 1]);
        var batchedH = dl.concat2d([h, h], 0);
        var _a = dl.basicLSTMCell(forgetBias, lstmKernel, lstmBias, batchedData, batchedC, batchedH), newC = _a[0], newH = _a[1];
        expect(newC.get(0, 0)).toEqual(newC.get(1, 0));
        expect(newH.get(0, 0)).toEqual(newH.get(1, 0));
    });
});
